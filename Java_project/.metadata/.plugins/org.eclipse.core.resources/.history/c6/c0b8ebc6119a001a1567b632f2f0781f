package serial_com;

import java.awt.BorderLayout;
import java.util.Scanner;

import com.fazecast.jSerialComm.*;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JLabel;

public class MainFrame {
	static SerialPort chosenPort;
	private JFrame frame;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					JFrame window = new JFrame();
					
					// create and configure the window
					window.setTitle("Arduino Medical Information System");
					window.setSize(468, 315);
					window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
					window.setVisible(true);
					window.getContentPane().setLayout(null);

					// create a drop-down box and connect button, then place them at the top of the
					// window
					JComboBox<String> portList = new JComboBox<String>();
					JButton connectButton = new JButton("Connect");
					JPanel topPanel = new JPanel();
					topPanel.setBounds(0, 0, 458, 35);
					topPanel.add(portList);
					topPanel.add(connectButton);
					window.getContentPane().add(topPanel);

					JTextArea txtLogs = new JTextArea();
					txtLogs.setBounds(26, 96, 400, 148);
					window.getContentPane().add(txtLogs);

					JLabel lblLogs = new JLabel("\tLogs :");
					lblLogs.setBounds(31, 65, 72, 42);
					window.getContentPane().add(lblLogs);
					
					JButton btnAdd = new JButton("Adauga");
					btnAdd.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) {
						AddFrame addFrame = new AddFrame();
						addFrame.setVisible(true);
						}
					});
					btnAdd.setBounds(76, 48, 97, 25);
					window.getContentPane().add(btnAdd);
					
					JButton btnSearch = new JButton("Cauta");
					btnSearch.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent arg0) {
						}
					});
					btnSearch.setBounds(197, 48, 97, 25);
					window.getContentPane().add(btnSearch);
					
					JButton btnDelete = new JButton("Sterge");
					btnDelete.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) {
						}
					});
					btnDelete.setBounds(317, 48, 97, 25);
					window.getContentPane().add(btnDelete);

					// populate the drop-down box
					SerialPort[] portNames = SerialPort.getCommPorts();
					for (int i = 0; i < portNames.length; i++)
						portList.addItem(portNames[i].getSystemPortName());

					// configure the connect button and use another thread to send data
					connectButton.addActionListener(new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent arg0) {
							if (connectButton.getText().equals("Connect")) {
								// attempt to connect to the serial port
								chosenPort = SerialPort.getCommPort(portList.getSelectedItem().toString());
								chosenPort.setComPortTimeouts(SerialPort.TIMEOUT_SCANNER, 0, 0);
								if (chosenPort.openPort()) {
									connectButton.setText("Disconnect");
									portList.setEnabled(false);
									btnAdd.setEnabled(false);
									txtLogs.setText("Succesfully Connected to port ");
									System.out.println(
											"Succesfully Connected to port " + portList.getSelectedItem().toString());
									// userInput.setText(t);

									// create a new thread for sending data to display data to logs
									Thread thread_logs = new Thread() {
										@Override
										public void run() {
											// wait after connecting, so the bootloader can finish
											try {
												Thread.sleep(100);
											} catch (Exception e) {
											}
											Scanner data = new Scanner(chosenPort.getInputStream());
											while (data.hasNextLine()) {
											    txtLogs.setText("Looking for available cards");
												System.out.println(data.nextLine());
											}
											try {
												Thread.sleep(100);
											} catch (Exception e) {
											}

											// enter an infinite loop that sends text to the arduino
											// PrintWriter output = new PrintWriter(chosenPort.getOutputStream());
											// while(true) {
											// output.print(new SimpleDateFormat("hh:mm:ss a MMMMMMM dd,
											// yyyy").format(new Date()));
											// output.flush();
											// try {Thread.sleep(100); } catch(Exception e) {}
											// }

										}
									};
									thread_logs.start();

									// create a new thread for sending data to the arduino
									Thread thread = new Thread() {
										@Override
										public void run() {
											// wait after connecting, so the bootloader can finish
											try {
												Thread.sleep(100);
											} catch (Exception e) {
											}

											// enter an infinite loop that sends text to the arduino
											// PrintWriter output = new PrintWriter(chosenPort.getOutputStream());
											// while(true) {
											// output.print(new SimpleDateFormat("hh:mm:ss a MMMMMMM dd,
											// yyyy").format(new Date()));
											// output.flush();
											// try {Thread.sleep(100); } catch(Exception e) {}
											// }
										}
									};
									thread.start();
								}
							} else {
								// disconnect from the serial port
								chosenPort.closePort();
								portList.setEnabled(true);
								connectButton.setText("Connect");
								txtLogs.setText("Cannot connect to the selected port");
								System.out.println(
										"Cannot connect to the selected port " + portList.getSelectedItem().toString());
							}
						}
					});

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}
